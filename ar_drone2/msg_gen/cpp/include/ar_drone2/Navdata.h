/* Auto-generated by genmsg_cpp for file /home/karel/ros/ar_drone2/msg/Navdata.msg */
#ifndef AR_DRONE2_MESSAGE_NAVDATA_H
#define AR_DRONE2_MESSAGE_NAVDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Twist.h"

namespace ar_drone2
{
template <class ContainerAllocator>
struct Navdata_ {
  typedef Navdata_<ContainerAllocator> Type;

  Navdata_()
  : position()
  , altitude(0.0)
  , battery(0)
  {
  }

  Navdata_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , altitude(0.0)
  , battery(0)
  {
  }

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  position;

  typedef float _altitude_type;
  float altitude;

  typedef uint32_t _battery_type;
  uint32_t battery;


private:
  static const char* __s_getDataType_() { return "ar_drone2/Navdata"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "49de2abc292ef1d9be7a19689625ceb8"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Twist position\n\
float32 altitude \n\
uint32 battery\n\
        \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, altitude);
    ros::serialization::serialize(stream, battery);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, altitude);
    ros::serialization::deserialize(stream, battery);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(altitude);
    size += ros::serialization::serializationLength(battery);
    return size;
  }

  typedef boost::shared_ptr< ::ar_drone2::Navdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ar_drone2::Navdata_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Navdata
typedef  ::ar_drone2::Navdata_<std::allocator<void> > Navdata;

typedef boost::shared_ptr< ::ar_drone2::Navdata> NavdataPtr;
typedef boost::shared_ptr< ::ar_drone2::Navdata const> NavdataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ar_drone2::Navdata_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ar_drone2::Navdata_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ar_drone2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ar_drone2::Navdata_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ar_drone2::Navdata_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ar_drone2::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "49de2abc292ef1d9be7a19689625ceb8";
  }

  static const char* value(const  ::ar_drone2::Navdata_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x49de2abc292ef1d9ULL;
  static const uint64_t static_value2 = 0xbe7a19689625ceb8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ar_drone2::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ar_drone2/Navdata";
  }

  static const char* value(const  ::ar_drone2::Navdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ar_drone2::Navdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Twist position\n\
float32 altitude \n\
uint32 battery\n\
        \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::ar_drone2::Navdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ar_drone2::Navdata_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ar_drone2::Navdata_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.altitude);
    stream.next(m.battery);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Navdata_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ar_drone2::Navdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ar_drone2::Navdata_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "battery: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.battery);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AR_DRONE2_MESSAGE_NAVDATA_H

